---
openapi: 3.0.1
info:
  title: API Test
  description: Let's practice Swagger UI
  version: 1.0.0
servers:
- url: http://localhost:61314
  description: Generated server url
security:
- JWT: []
tags:
- name: Auth API
  description: '인증 토큰 필요 X, 로그인 요청(form 방식 요청): /api/auth/login'
paths:
  "/api/post":
    get:
      tags:
      - post-controller
      summary: 게시글 식별자 리스트로 조회
      description: 'ex: 특정 유저가 좋아요 누른 모든 게시글 조회 등'
      operationId: getPost
      parameters:
      - name: targets
        in: query
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
    post:
      tags:
      - post-controller
      summary: 게시글 신규작성
      description: 새로운 게시글 작성
      operationId: addPost
      requestBody:
        content:
          multipart/form-data:
            schema:
              "$ref": "#/components/schemas/RequestAddPostDTO"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/post/{postId}":
    post:
      tags:
      - post-controller
      summary: 게시글 업데이트
      description: 자신의 게시글이 아닌 경우 수정 불가(jwt 검증). Patch나 Put 요청이 아닌 Post 요청임을 주의
      operationId: updatePost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              "$ref": "#/components/schemas/RequestUpdatePostDTO"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
    delete:
      tags:
      - post-controller
      summary: 게시글 제거
      description: 자신의 게시글이 아닌 경우 제거 불가(jwt 검증)
      operationId: deletePost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/member/logout":
    post:
      tags:
      - member-controller
      summary: 로그아웃
      description: 해당 회원의 Refresh Token을 Redis에서 제거
      operationId: logout
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/like":
    post:
      tags:
      - likes-controller
      summary: 좋아요 처리
      operationId: addLike
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestLikesDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
    delete:
      tags:
      - likes-controller
      summary: 좋아요 제거
      operationId: deleteLike
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestLikesDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/image":
    post:
      tags:
      - image-controller
      summary: 이미지 업로드(사용X)
      operationId: uploadImages
      parameters:
      - name: imageDTO
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/RequestImageDTO"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
    delete:
      tags:
      - image-controller
      summary: 복수의 이미지 삭제(사용X)
      operationId: deleteImage
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int64
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/follow":
    post:
      tags:
      - follow-controller
      summary: 팔로우
      operationId: follow
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestFollowDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
    delete:
      tags:
      - follow-controller
      summary: 언팔로우
      operationId: unfollow
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestFollowDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/comment":
    post:
      tags:
      - comment-controller
      summary: 댓글 작성
      operationId: createComment
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestCommentDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/join":
    post:
      tags:
      - Auth API
      summary: 회원 가입
      operationId: join
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/JoinDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/complete":
    post:
      tags:
      - Auth API
      summary: OAuth2를 통한 회원가입 이후 유저네임만 추가로 저장
      operationId: completeProfile
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CompleteDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/member/{userId}":
    get:
      tags:
      - member-controller
      summary: 회원 식별자로 조회
      operationId: getMemberByUserId
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/MemberDTO"
    delete:
      tags:
      - member-controller
      summary: 회원 탈퇴
      description: 자기 자신이 아니면 탈퇴 불가(jwt로 검증)
      operationId: deleteMember
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
    patch:
      tags:
      - member-controller
      summary: 회원 정보 수정
      description: 자기 자신이 아니면 수정 불가(jwt로 검증)
      operationId: updateMember
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/JoinDTO"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/comment/{commentId}":
    patch:
      tags:
      - comment-controller
      summary: 댓글 수정
      operationId: updateComment
      parameters:
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/comment/off/{commentId}":
    patch:
      tags:
      - comment-controller
      summary: 댓글 삭제
      description: Delete 요청이 아닌 Patch 요청임을 주의
      operationId: deleteComment
      parameters:
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/post/recent/{startOffset}":
    get:
      tags:
      - post-controller
      summary: 게시글 최신순 10개 조회(페이징)
      description: startOffset은 1부터 시작
      operationId: getPostListPaging
      parameters:
      - name: startOffset
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/post/own/{memberId}/{startOffset}":
    get:
      tags:
      - post-controller
      summary: '게시글 최신순 10개 조회: 회원별'
      operationId: getPostByMemberId
      parameters:
      - name: memberId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: startOffset
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/member/name/{username}":
    get:
      tags:
      - member-controller
      summary: 회원 유저네임으로 조회
      operationId: getMemberByUsernameHash
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/MemberDTO"
  "/api/like/{postId}/{startOffset}":
    get:
      tags:
      - likes-controller
      summary: '특정 게시글의 좋아요 정보 조회: 페이징'
      description: startOffset은 1부터 시작
      operationId: getLikesByPostId
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: startOffset
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/like/default/{memberId}":
    get:
      tags:
      - likes-controller
      summary: 특정 유저가 좋아요를 누른 모든 게시글의 식별자를 리스트로 반환
      description: 로그인 성공 시 수행하여 좋아요한 게시글 표시할 때 사용
      operationId: getDefaultLikesInfo
      parameters:
      - name: memberId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/image/{postId}":
    get:
      tags:
      - image-controller
      summary: 게시글 식별자를 통한 이미지 경로 조회(사용X)
      operationId: getImagePath
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
    delete:
      tags:
      - image-controller
      summary: 특정 게시글의 모든 이미지 삭제(사용X)
      operationId: deleteAllImageByPost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/image/file/{imagename}":
    get:
      tags:
      - image-controller
      summary: 이미지 실제 파일을 조회
      description: 파라메터에 파일의 확장자명까지 기입해주세요.
      operationId: getImageFile
      parameters:
      - name: imagename
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            image/jpeg:
              schema:
                type: object
  "/api/follow/target/{memberId}":
    get:
      tags:
      - follow-controller
      summary: 특정 유저가 팔로우한 회원 목록을 조회
      operationId: getTargets
      parameters:
      - name: memberId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/follow/follower/{targetId}":
    get:
      tags:
      - follow-controller
      summary: 특정 유저를 팔로우하는 회원 목록을 조회
      operationId: getFollowers
      parameters:
      - name: targetId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/comment/{postId}/{startOffset}":
    get:
      tags:
      - comment-controller
      summary: 댓글 최신순 조회
      description: startOffset은 1부터 시작
      operationId: getCommentByPostIdPaging
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: startOffset
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/refresh":
    get:
      tags:
      - Auth API
      summary: Refresh Token 재발급
      description: Access Token 또한 재발급한다.
      operationId: tokenRefresh
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/check-username/{username}":
    get:
      tags:
      - Auth API
      summary: 유저네임 중복 체크
      operationId: checkUsername
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
components:
  schemas:
    RequestAddPostDTO:
      type: object
      properties:
        memberId:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        imageList:
          type: array
          items:
            type: string
            format: binary
    RequestUpdatePostDTO:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        newImageList:
          type: array
          items:
            type: string
            format: binary
        deletedImageIdList:
          type: array
          items:
            type: integer
            format: int64
    RequestLikesDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        postId:
          type: integer
          format: int64
        memberId:
          type: integer
          format: int64
    RequestImageDTO:
      type: object
      properties:
        postId:
          type: integer
          format: int64
        fileList:
          type: array
          items:
            type: string
            format: binary
    RequestFollowDTO:
      type: object
      properties:
        memberId:
          type: integer
          format: int64
        targetId:
          type: integer
          format: int64
    RequestCommentDTO:
      type: object
      properties:
        postId:
          type: integer
          format: int64
        memberId:
          type: integer
          format: int64
        content:
          type: string
        parentCommentId:
          type: integer
          format: int64
    JoinDTO:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
        age:
          type: integer
          format: int32
        username:
          type: string
    CompleteDTO:
      type: object
      properties:
        username:
          type: string
    MemberDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        age:
          type: integer
          format: int32
        username:
          type: string
        followerCount:
          type: integer
          format: int32
        followingCount:
          type: integer
          format: int32
        roleType:
          type: string
          enum:
          - ROLE_ADMIN
          - ROLE_USER
  securitySchemes:
    JWT:
      type: http
      name: JWT
      scheme: bearer
      bearerFormat: JWT
